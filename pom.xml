<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.lindonge</groupId>
    <artifactId>utility-parent</artifactId>
    <version>3.0.3</version>
    <description>Java日常工具类</description>
    <name>utility</name>

    <packaging>pom</packaging>

    <properties>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>

        <spring.boot.version>2.0.6.RELEASE</spring.boot.version>
        <spring.cloud.version>Finchley.SR2</spring.cloud.version>
        <spring.cloud.netflix>2.0.2.RELEASE</spring.cloud.netflix>

        <junit.version>4.12</junit.version>
    </properties>

    <modules>
        <module>common-core</module>
        <module>common-spring</module>
        <module>common-http</module>
        <module>common-excel</module>

        <module>cloud-shiro</module>
        <module>cloud-quartz</module>
        <module>cloud-atomikos</module>
        <module>cloud-cache</module>
        <module>cloud-redis</module>
        <module>cloud-database</module>
        <module>cloud-activemq</module>
        <module>cloud-lucene</module>
        <module>cloud-rabbitmq</module>
        <module>cloud-mongodb</module>
        <module>cloud-activiti</module>

    </modules>

    <dependencies>

        <!-- Starter基础包：AutoConfiguration/Logging/YAML支持，解决很多项目引用SpringBoot部份包时无法读取Yaml的问题 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <!--解决很多项目自定义Configuration配置文件的问题-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-autoconfigure</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
        </dependency>

        <!-- 集成测试包，所有项目都需要有测试包存在 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- logback日志包 -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.3</version>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>1.2.3</version>
            <optional>true</optional>
        </dependency>

        <!-- 简化代码注解包，必选 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.18</version>
            <scope>provided</scope>
        </dependency>

        <!-- javax提供的annotation -->
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
            <version>1</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <!--引入SpringCloud和SpringBoot的所有相关依赖-->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!--<dependency>-->
            <!--<groupId>org.springframework.cloud</groupId>-->
            <!--<artifactId>spring-cloud-dependencies</artifactId>-->
            <!--<version>${spring.cloud.version}</version>-->
            <!--<type>pom</type>-->
            <!--<scope>import</scope>-->
            <!--</dependency>-->

            <!--<dependency>-->
            <!--<groupId>org.springframework.cloud</groupId>-->
            <!--<artifactId>spring-cloud-netflix</artifactId>-->
            <!--<version>${spring.cloud.netflix}</version>-->
            <!--<type>pom</type>-->
            <!--<scope>import</scope>-->
            <!--</dependency>-->
        </dependencies>
    </dependencyManagement>

    <build>
        <defaultGoal>compile</defaultGoal>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <!--pluginManagement一般是用来在父POM中定义，子模块中可以不用再定义-->
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.7.0</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
                        <encoding>${project.build.sourceEncoding}</encoding>
                        <verbose>true</verbose>
                    </configuration>
                </plugin>

                <!-- Docker布署插件 -->
                <!--<plugin>-->
                <!--<groupId>com.spotify</groupId>-->
                <!--<artifactId>docker-maven-plugin</artifactId>-->
                <!--</plugin>-->

            </plugins>
        </pluginManagement>

    </build>

    <!--SpringBoot非Release版本，必须引用-->
    <!--<repositories>-->
    <!--<repository>-->
    <!--<id>spring-snapshots</id>-->
    <!--<url>http://repo.spring.io/snapshot</url>-->
    <!--<snapshots>-->
    <!--<enabled>true</enabled>-->
    <!--</snapshots>-->
    <!--</repository>-->

    <!--<repository>-->
    <!--<id>spring-milestones</id>-->
    <!--<url>http://repo.spring.io/milestone</url>-->
    <!--</repository>-->
    <!--</repositories>-->

    <!--<pluginRepositories>-->
    <!--<pluginRepository>-->
    <!--<id>spring-snapshots</id>-->
    <!--<url>http://repo.spring.io/snapshot</url>-->
    <!--</pluginRepository>-->

    <!--<pluginRepository>-->
    <!--<id>spring-milestones</id>-->
    <!--<url>http://repo.spring.io/milestone</url>-->
    <!--</pluginRepository>-->
    <!--</pluginRepositories>-->

</project>